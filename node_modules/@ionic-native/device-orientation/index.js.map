{"version":3,"sources":["../../../src/@ionic-native/plugins/device-orientation/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAwC7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AASH,IAAa,iBAAiB;IAAS,qCAAiB;IAAxD;;IA6BA,CAAC;IA3BC;;;OAGG;IAEH,6CAAiB,GAAjB,cAAgE,MAAM,CAAC,CAAC,CAAC;IAEzE;;;;;;OAMG;IAMH,wCAAY,GAAZ,UAAa,OAAyC,IAAiD,MAAM,CAAC,CAAC,CAAC;IAQlH,wBAAC;AAAD,CA7BA,AA6BC,CA7BsC,iBAAiB,GA6BvD;AANM,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AArBA;IADC,OAAO,EAAE;;;;0DAC+D;AAczE;IALC,OAAO,CAAC;QACP,aAAa,EAAE,SAAS;QACxB,UAAU,EAAE,IAAI;QAChB,aAAa,EAAE,YAAY;KAC5B,CAAC;;;oCACuD,UAAU;qDAA6C;AArBrG,iBAAiB;IAR7B,MAAM,CAAC;QACN,UAAU,EAAE,mBAAmB;QAC/B,MAAM,EAAE,mCAAmC;QAC3C,SAAS,EAAE,mBAAmB;QAC9B,IAAI,EAAE,6DAA6D;QACnE,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC;KACzI,CAAC;GAEW,iBAAiB,CA6B7B;SA7BY,iBAAiB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface DeviceOrientationCompassHeading {\n\n  /**\n   * The heading in degrees from 0-359.99 at a single moment in time. (Number)\n   */\n  magneticHeading: number;\n\n  /**\n   * The heading relative to the geographic North Pole in degrees 0-359.99 at a single moment in time. A negative value indicates that the true heading can't be determined. (Number)\n   */\n  trueHeading: number;\n\n  /**\n   * The deviation in degrees between the reported heading and the true heading. (Number)\n   */\n  headingAccuracy: number;\n\n  /**\n   * The time at which this heading was determined. (DOMTimeStamp)\n   */\n  timestamp: any;\n\n}\n\nexport interface DeviceOrientationCompassOptions {\n\n  /**\n   * How often to retrieve the compass heading in milliseconds. (Number) (Default: 100)\n   */\n  frequency?: number;\n\n  /**\n   * The change in degrees required to initiate a watchHeading success callback. When this value is set, frequency is ignored. (Number)\n   */\n  filter?: number;\n\n}\n\n/**\n * @name Device Orientation\n * @description\n * Requires Cordova plugin: `cordova-plugin-device-orientation`. For more info, please see the [Device Orientation docs](https://github.com/apache/cordova-plugin-device-orientation).\n *\n * @usage\n * ```typescript\n * // DeviceOrientationCompassHeading is an interface for compass\n * import { DeviceOrientation, DeviceOrientationCompassHeading } from '@ionic-native/device-orientation';\n *\n * constructor(private deviceOrientation: DeviceOrientation) { }\n *\n * ...\n *\n * // Get the device current compass heading\n * this.deviceOrientation.getCurrentHeading().then(\n *   (data: DeviceOrientationCompassHeading) => console.log(data),\n *   (error: any) => console.log(error)\n * );\n *\n * // Watch the device compass heading change\n * var subscription = this.deviceOrientation.watchHeading().subscribe(\n *   (data: DeviceOrientationCompassHeading) => console.log(data)\n * );\n *\n * // Stop watching heading change\n * subscription.unsubscribe();\n * ```\n * @interfaces\n * DeviceOrientationCompassOptions\n * DeviceOrientationCompassHeading\n */\n@Plugin({\n  pluginName: 'DeviceOrientation',\n  plugin: 'cordova-plugin-device-orientation',\n  pluginRef: 'navigator.compass',\n  repo: 'https://github.com/apache/cordova-plugin-device-orientation',\n  platforms: ['Amazon Fire OS', 'Android', 'BlackBerry 10', 'Browser', 'Firefox OS', 'iOS', 'Tizen', 'Ubuntu', 'Windows', 'Windows Phone']\n})\n\nexport class DeviceOrientation extends IonicNativePlugin {\n\n  /**\n   * Get the current compass heading.\n   * @returns {Promise<DeviceOrientationCompassHeading>}\n   */\n  @Cordova()\n  getCurrentHeading(): Promise<DeviceOrientationCompassHeading> { return; }\n\n  /**\n   * Get the device current heading at a regular interval\n   *\n   * Stop the watch by unsubscribing from the observable\n   * @param {DeviceOrientationCompassOptions} options Options for compass. Frequency and Filter. Optional\n   * @returns {Observable<DeviceOrientationCompassHeading>} Returns an observable that contains the compass heading\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    observable: true,\n    clearFunction: 'clearWatch'\n  })\n  watchHeading(options?: DeviceOrientationCompassOptions): Observable<DeviceOrientationCompassHeading> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}